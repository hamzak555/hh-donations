PROJECT DEVELOPMENT RULES
========================

1. BROWSER REFRESH RULE
   - Always reload the browser tab after making changes to show updates
   - Ensure the development server is running before reloading
   - Verify changes are visible in the browser

2. GITHUB BACKUP RULE
   - Periodically backup the project to GitHub repository
   - Commit changes with clear, descriptive messages
   - Push to remote repository regularly

3. FILE MANAGEMENT RULES
   - NEVER create files unless absolutely necessary
   - ALWAYS prefer editing existing files over creating new ones
   - NEVER proactively create documentation files (*.md) or README files unless explicitly requested

4. CODE STYLE RULES
   - Follow existing code conventions in the project
   - Match the existing indentation and formatting style
   - Use existing libraries and utilities - don't assume new ones are available

5. TESTING & VERIFICATION
   - Test all changes before considering them complete
   - Run lint and typecheck commands when available
   - Verify functionality works as expected

6. COMMUNICATION
   - Keep responses concise and direct
   - Show results rather than explaining what will be done
   - Focus on completing the requested task without unnecessary elaboration

7. SERVER TROUBLESHOOTING - ERR_CONNECTION_REFUSED FIX
   When encountering "localhost refused to connect" or ERR_CONNECTION_REFUSED:
   
   STEP 1: Kill all conflicting processes
   - Run: killall node
   - Or specifically: pkill -f "react-scripts" and pkill -f "npm start"
   
   STEP 2: Check for port conflicts
   - Check port 3000: lsof -i :3000
   - Check port 3001: lsof -i :3001
   - Kill any process using these ports: kill -9 [PID]
   
   STEP 3: Start server with explicit port in background
   - Navigate to app directory: cd /Users/hamzakhalid/Desktop/HH_Donations/hh-donations-app
   - Start with nohup: PORT=3000 nohup npm start > app.log 2>&1 &
   
   STEP 4: Verify server is running
   - Wait 8 seconds for server to compile
   - Test connection: curl -I http://localhost:3000
   - Check process: ps aux | grep 'react-scripts' | grep -v grep
   
   STEP 5: Open browser
   - Run: open http://localhost:3000
   - If still not working, manually refresh browser or clear cache
   
   ROOT CAUSE: The server was trying to use port 3001 instead of 3000, and old processes were hanging without properly binding to ports.
   
   PREVENTION: Always use PORT=3000 when starting the server and ensure no zombie processes are running.

8. CORS CONFIGURATION - "Error connecting to server" FIX
   When frontend shows "Error connecting to server" despite backend running:
   
   SYMPTOMS:
   - Frontend loads but shows "Error connecting to server" on login/API calls
   - Backend server is running and accessible via curl
   - Network requests fail in browser due to CORS policy
   
   STEP 1: Verify both servers are running
   - Frontend: ps aux | grep 'react-scripts' | grep -v grep
   - Backend: ps aux | grep 'node.*server.js' | grep -v grep
   - Check ports: lsof -i :3000 && lsof -i :5001
   
   STEP 2: Test backend API directly
   - Run: curl -X POST http://localhost:5001/api/auth/login -H "Content-Type: application/json" -d '{"email":"admin@hh-donations.com","password":"admin123"}'
   - If this works, the issue is likely CORS
   
   STEP 3: Check CORS configuration
   - Test with origin header: curl -X POST http://localhost:5001/api/auth/login -H "Origin: http://localhost:3000" -H "Content-Type: application/json" -d '{"email":"admin@hh-donations.com","password":"admin123"}' -i
   - Look for: Access-Control-Allow-Origin in response headers
   - Should show: Access-Control-Allow-Origin: http://localhost:3000
   
   STEP 4: Fix CORS if misconfigured
   - Check backend .env file: /Users/hamzakhalid/Desktop/HH_Donations/hh-donations-backend/.env
   - Verify: FRONTEND_URL=http://localhost:3000 (NOT 3001)
   - If wrong, change to: FRONTEND_URL=http://localhost:3000
   
   STEP 5: Restart backend server
   - Kill current backend: kill -9 [PID from step 1]
   - Restart: cd /Users/hamzakhalid/Desktop/HH_Donations/hh-donations-backend && nohup node server.js > server.log 2>&1 &
   - Wait 3 seconds for server to start
   
   STEP 6: Test and refresh
   - Test CORS again with curl command from step 3
   - Refresh browser: osascript -e 'tell application "System Events" to keystroke "r" using command down'
   - Try logging in with: admin@hh-donations.com / admin123
   
   ROOT CAUSE: The backend CORS policy was configured for localhost:3001 but frontend runs on localhost:3000, causing browser to block requests.
   
   PREVENTION: Always ensure FRONTEND_URL in backend .env matches the actual frontend port (3000).

9. CORS FIX AFTER CODE CHANGES - SPECIFIC ISSUE
   When "Error connecting to server" appears after making code changes to components:
   
   CONTEXT: This occurred after switching from ClickableDashboard to AdminDashboard component
   and restarting React servers multiple times.
   
   SYMPTOMS:
   - React app compiles successfully
   - Frontend loads but shows "Error connecting to server" on login
   - Both servers appear to be running
   
   ROOT CAUSE: Backend server process was killed during React restarts but may not have 
   restarted properly with correct CORS configuration.
   
   SPECIFIC SOLUTION (when Section 8 general steps don't work):
   1. Kill the specific backend process: kill -9 [BACKEND_PID] 
   2. Manually restart backend with explicit CORS: cd /Users/hamzakhalid/Desktop/HH_Donations/hh-donations-backend && nohup node server.js > server.log 2>&1 & sleep 3
   3. Verify server startup in logs: tail -10 /Users/hamzakhalid/Desktop/HH_Donations/hh-donations-backend/server.log
   4. Force browser refresh: osascript -e 'tell application "System Events" to keystroke "r" using command down'
   
   KEY INSIGHT: After major code changes and multiple server restarts, the backend may lose
   proper CORS configuration even if .env file is correct. Manual restart resolves this.

10. VERCEL PRODUCTION DEPLOYMENT - "Error connecting to server" FIX
    When production site works locally but shows "Error connecting to server" in production:
    
    SYMPTOMS:
    - Local development works perfectly (localhost:3000 -> localhost:5001)
    - Production site loads but admin login shows "Error connecting to server"
    - Vercel build logs show various deployment failures
    
    ROOT CAUSE: Complex full-stack apps with Express backends don't deploy properly on Vercel
    using traditional server structures. Vercel requires serverless function architecture.
    
    COMPLETE SOLUTION STEPS:
    
    STEP 1: Restructure for Vercel Serverless Functions
    - Delete /api/index.js (complex Express server approach)
    - Create individual serverless functions in /api directory:
      * /api/auth/login.js - Login endpoint
      * /api/bins/admin.js - Bins data endpoint  
      * /api/health.js - Health check endpoint
    - Each function must be self-contained with its own CORS headers and DB initialization
    
    STEP 2: Simplify Dependencies
    - Update root package.json to only include essential dependencies:
      * jsonwebtoken, bcryptjs, sqlite3
    - Remove Express, CORS, helmet, and other server dependencies
    - Each serverless function handles its own requirements
    
    STEP 3: Fix Vercel Configuration
    - Update vercel.json:
      * Remove complex functions/routes configuration
      * Set CI=false to prevent ESLint warnings from failing build
      * Keep env variables for production secrets
    - Remove backend install command - only install frontend dependencies
    
    STEP 4: Database Handling
    - Use /tmp/database.db path for Vercel temporary storage
    - Initialize database and sample data in each function call
    - Handle database connections per-function, not globally
    
    STEP 5: CORS Configuration
    - Add CORS headers directly in each serverless function:
      'Access-Control-Allow-Origin': '*'
      'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS'
      'Access-Control-Allow-Headers': 'Content-Type, Authorization'
    - Handle OPTIONS requests in each function
    
    EXAMPLE SERVERLESS FUNCTION STRUCTURE:
    ```javascript
    // /api/auth/login.js
    const corsHeaders = {
      'Access-Control-Allow-Origin': '*',
      'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',
      'Access-Control-Allow-Headers': 'Content-Type, Authorization'
    };
    
    module.exports = async (req, res) => {
      Object.keys(corsHeaders).forEach(key => {
        res.setHeader(key, corsHeaders[key]);
      });
      
      if (req.method === 'OPTIONS') {
        return res.status(200).end();
      }
      
      // Function logic here...
    };
    ```
    
    STEP 6: Deploy and Test
    - git add . && git commit -m "Restructure for Vercel serverless"  
    - git push origin main
    - Wait for Vercel deployment (2-3 minutes)
    - Test endpoints:
      * https://yoursite.com/api/health
      * https://yoursite.com/admin (login functionality)
    
    PREVENTION: 
    - For Vercel deployments, always use serverless function architecture from the start
    - Avoid complex Express server setups for Vercel platform
    - Test each API endpoint individually as serverless functions
    - Keep functions lightweight and self-contained
    
    SUCCESS INDICATORS:
    - /api/health returns JSON with status: "OK"  
    - Admin login works with proper JWT token generation
    - No CORS errors in browser console
    - Vercel build completes without ESLint failures

[This file will be updated with additional rules as the project progresses]